@page
@model PRN221_GroupProject.Pages.User.IndexModel
@* @using PRN221_GroupProject.Models *@

<h2>User List</h2>

<!-- Create Button -->
<div class="button_group">
    <a asp-page="Create" class="btn btn-primary">Add New</a>

    <form method="get" id="searchForm">
        <div class="search_bar w-100 d-flex justify-content-between">
            @* Search Button *@
            <div class="w-75">
                <input name="searchTermParam" autofocus value="@Model.SearchTerm" id="searchInput"
                       class="form-control mr-sm-2" type="search" placeholder="Search">
            </div>

            <div class="Filter_Dropdown ms-2">
                <button class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" type="button"
                        id="dropdownMenuButton1" aria-expanded="false">
                    Filter
                </button>
                @* Filter dropdown *@
                <ul class="dropdown-menu filter-dropdown p-2" aria-labelledby="dropdownMenuButton1">
                    @* Status *@
                    <li>
                        <button id="StatusMenu" class="dropdown-btn" type="button">
                            Status
                            <i class="fa fa-caret-right"></i>
                        </button>
                        <div class="dropdown-container">
                            <br />
                            <label class="w-75">Active</label>
                            <input checked="@(Model.statuses != null && Model.statuses.Contains("True"))"
                                   class="form-check-input" type="checkbox" value="active"
                                   name="statusesParam"><br /><br />
                            <label class="w-75">InActive</label>
                            <input checked="@(Model.statuses != null && Model.statuses.Contains("False"))"
                                   class="form-check-input" type="checkbox" value="inactive"
                                   name="statusesParam"><br /><br />
                        </div>
                    </li>
                    @* Role *@
                    <li>
                        <button id="RoleMenu" class="dropdown-btn" type="button">
                            Role
                            <i class="fa fa-caret-right"></i>
                        </button>
                        @* <div class="dropdown-container">
                        <br />
                        <label class="w-75">Admin</label><input checked="@(Model.Roles != null && Model.Roles.Contains("Admin"))"
                        class="form-check-input" type="checkbox" value="Admin"
                        name="rolesParam"><br /><br />
                        <label class="w-75">User</label><input checked="@(Model.Roles != null && Model.Roles.Contains("User"))"
                        class="form-check-input" type="checkbox" value="User"
                        name="rolesParam"><br /><br />
                        </div> *@
                    </li>
                    @* Filter's button group *@
                    <div class="button_group d-flex justify-content-end">
                        <button class="btn btn-secondary" id="cancelFilter" type="button">Cancel</button>
                        <button class="btn btn-primary ms-2" type="submit">Apply</button>
                    </div>
                </ul>
            </div>
        </div>
    </form>

</div>

<div>
    <!-- Data table -->
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Roles</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                <tr>
                    <td>@user.User.Name</td>
                    <td>@user.User.Email</td>
                    <td>@user.User.PhoneNumber</td>
                    <td>
                        @foreach (var role in user.Roles)
                        {
                            <span>@role</span>
                            <br />
                        }
                    </td>
                    <td>
                        @if (user.User.Status)
                        {
                            <span class="status-button" style="background-color: #28a745; color: #fff;">Active</span>
                        }
                        else
                        {
                            <span class="status-button" style="background-color: #6c757d; color: #fff;">InActive</span>
                        }
                    </td>
                    <!-- Edit Button -->
                    <td>
                        <a asp-page="./Edit" asp-route-id="@user.User.Id" class="btn btn-warning">Edit</a>
                    </td>
                    <!-- Delete Button -->
                    <td>
                        <form method="post" asp-page-handler="Delete" asp-route-id="@user.User.Id" onsubmit="return confirm('Are you sure you want to delete this user?');">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation example" class="d-flex justify-content-between mh-75 align-items-center">
        <div class="w-1 h-1"></div>
        <ul class="pagination">
            @{
                string searchTermQueryString = Model.SearchTerm?.Length > 0 ? $"&searchtermParam={Model.SearchTerm}" : "";
            }

            <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                <a class="page-link"
                   href="?pageNumberParam=@(Model.PageNumber - 1)&pageSizeParam=@Model.PageSize@searchTermQueryString"
                   aria-label="Trước">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                @*Calculate Gap Between Current Index And Current Page*@
                int gap = Math.Abs(i - Model.PageNumber);

                if (i == 1 || i == Model.TotalPages || gap <= 3)
                {
                    <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                        <a class="page-link"
                           href="?pageNumberParam=@i&pageSizeParam=@Model.PageSize@searchTermQueryString">@i</a>
                    </li>
                }

                else if (gap == 4)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }

            <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                <a class="page-link"
                   href="?pageNumberParam=@(Model.PageNumber + 1)&pageSizeParam=@Model.PageSize@searchTermQueryString"
                   aria-label="Tiếp">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Tiếp</span>
                </a>
            </li>
        </ul>

        <select id="PageSize" class="mh-30px">
            @for (int i = 1; i <= 5; i++)
            {
                int value = i * 5;
                <option selected="@((value == Model.PageSize).ToString().ToLower())" value="@value">@value</option>
            }
        </select>
    </nav>
</div>

@section Scripts {

    @* Change row perpage *@
    <script>
        document.getElementById('PageSize').addEventListener('change', function () {
            var selectedPageSize = this.value;
            console.log(selectedPageSize);
            var currentPageNumber = @Model.PageNumber;
            var searchTerm = '@Model.SearchTerm';
            window.location.href = `?pageNumberParam=${currentPageNumber}&pageSizeParam=${selectedPageSize}` + (searchTerm ? `&searchTermParam=${searchTerm}` : '');

        });
    </script>

    @* Drop down menu *@
    <script>
        function toggleMenu() {
            /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content - This allows the user to have multiple dropdowns without any conflict */
            var dropdown = document.getElementsByClassName("dropdown-btn");
            var i;
            for (i = 0; i < dropdown.length; i++) {
                dropdown[i].addEventListener("click", function () {
                    this.classList.toggle("active");
                    var dropdownContent = this.nextElementSibling;
                    if (!this.classList.contains("active")) {
                        saveStateLCS(this.id, false)
                        dropdownContent.style.display = "none";
                        this.querySelector("i").classList.remove("fa-caret-down");
                        this.querySelector("i").classList.add("fa-caret-right");
                    } else {
                        saveStateLCS(this.id, true)
                        dropdownContent.style.display = "block";
                        this.querySelector("i").classList.remove("fa-caret-right");
                        this.querySelector("i").classList.add("fa-caret-down");
                    }
                });
            }
        }
        toggleMenu()

        //Save menu state into local storage
        function saveStateLCS(id, value) {
            localStorage.setItem(id, value);
        }

        //Get menu state from local storage when app start
        function GetStateFromLCS() {
            var dropdown = document.getElementsByClassName("dropdown-btn");
            for (i = 0; i < dropdown.length; i++) {
                let state = localStorage.getItem(dropdown[i].id);
                if (state == "true") {
                    dropdown[i].classList.add("active")
                    console.log("test")
                } else {
                    dropdown[i].classList.remove("active")
                }
            }
        }
        GetStateFromLCS()



        // Get the cancel butto
        const cancelBtn = document.getElementById('cancelFilter');

        cancelBtn.addEventListener('click', function () {
            $('input[type="checkbox"]:checked').prop('checked', false);
        });

    </script>

    @* Prevent close menu click inside bootstrap *@
    <script>
        document.querySelector('.dropdown-menu').addEventListener('click', function (event) {
            event.stopPropagation();
        });
    </script>

    @* Search *@
    <script>
        // Get the search input field
        const searchInput = document.getElementById('searchInput');

        // Set focus if value exist
        if (searchInput && searchInput.value) {
            searchInput.focus(); //sets focus to element

            //Set text cursor end of line
            var val = searchInput.value; //store the value of the element
            searchInput.value = ''; //clear the value of the element
            searchInput.value = val; //set that value back.
        }

        // Add an event listener for the input event
        searchInput.addEventListener('input', function () {
            // Get the form
            const form = document.getElementById('searchForm');
            // Submit the form
            form.submit();
        });
    </script>
}
