@page
@model PRN221_GroupProject.Pages.Coupons.IndexModel
@using PRN221_GroupProject.Models
@using PRN221_GroupProject.Repository.Users

@inject IUserRepository _userRepo

@{
    ViewData["Title"] = "Index";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
<div style="margin: 100px 40px 40px 40px;">

    <h1 class="mt-5">List Of Coupons</h1>


    <div class="Container mt-5">
        <div class="action_bar d-flex justify-content-between">
            @*Search*@
            <form method="get" id="searchForm">
                <div class="search_bar w100 d-flex justify-content-between">
                    <div class="w-75">
                        <input name="searchtermParam" autofocus value="@Model.searchterm" id="searchInput"
                               class="form-control mr-sm-2" type="search" placeholder="Search">
                    </div>
                    <div class="Filter_Dropdown ms-2">
                        @* Filter dropdown *@
                        <button class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" type="button"
                                id="dropdownMenuButton1" aria-expanded="false">
                            Filter
                        </button>
                        <ul class="dropdown-menu filter-dropdown p-2" aria-labelledby="dropdownMenuButton1" style="min-width: 400px;">
                            <!-- Min and Max Amount -->
                            <li>
                                <button id="AmountMenu" class="dropdown-btn" type="button">
                                    Amount
                                    <i class="fa fa-caret-right"></i>
                                </button>
                                <div class="dropdown-container">
                                    <br />
                                    <label for="minAmount">Min Amount:</label>
                                    <input type="number" class="form-control" name="minAmountParam" placeholder="min" step="0.01" value="@Model.minAmount">
                                    <br />
                                    <label for="maxAmount">Max Amount:</label>
                                    <input type="number" class="form-control" name="maxAmountParam" placeholder="max" step="0.01" value="@Model.maxAmount">
                                </div>
                            </li>
                            @* Status *@
                            <li>
                                <button id="StatusMenu" class="dropdown-btn" type="button">
                                    Status
                                    <i class="fa fa-caret-right"></i>
                                </button>
                                <div class="dropdown-container">
                                    <br />
                                    <label class="w-75">Active</label><input checked="@(Model.statuses != null && Model.statuses.Contains("True"))"
                                                                             class="form-check-input" type="checkbox" value="True"
                                                                             name="statusesParam"><br /><br />
                                    <label class="w-75">InActive</label><input checked="@(Model.statuses != null && Model.statuses.Contains("False"))"
                                                                               class="form-check-input" type="checkbox" value="False"
                                                                               name="statusesParam"><br /><br />
                                </div>
                            </li>

                            @* Filter's button group *@
                            <div class="button_group d-flex justify-content-end p-2">
                                <button class="btn btn-secondary" id="clearFilter" type="button">Clear</button>
                                <button class="btn btn-primary ms-2" type="submit">Apply</button>
                            </div>
                        </ul>
                    </div>

                </div>
            </form>
            @* Action button group *@
            <div class="button_group">
                <a asp-page="Create" class="btn btn-primary">Add New</a>
            </div>
        </div>

    </div>



    <div>
        <table class="table">
            <thead>
                <tr>
                    <th class="text-center" scope="col">
                        #
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].CouponCode)
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].DiscountAmount)
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].MinAmount)
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].MaxAmount)
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].Status)
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].CreatedBy)
                    </th>
                    <th class="text-center" scope="col">
                        @Html.DisplayNameFor(model => model.Coupon[0].CreatedDate)
                    </th>
                    <th class="text-center" scope="col">Actions</t>
                </tr>
            </thead>
            <tbody>
                @{
                    int index = 1;
                }
                @if (Model.Coupon.Count > 0)
                {
                    @foreach (var item in Model.Coupon)
                    {
                        <tr>
                            <th class="text-center" scope="row">@index</th>
                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.CouponCode)
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.DiscountAmount)
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.MinAmount)
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.MaxAmount)
                            </td>
                            @if (item.Status)
                            {
                                <td class="text-center">  <div class="status-button" style="padding: 6px 9px; border-radius: 4px ; background-color: #28a745; color: #fff;">Active</div></td>
                               
                            }
                            else
                            {
                                <td class="text-center"> <div class="status-button" style="padding:7px 10px; border-radius: 4px; background-color: #6c757d; color: #fff;">InActive</div></td>
                            }
                            <td class="text-center">
                                @(await _userRepo.GetUserNameById(item.CreatedBy))
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.CreatedDate)
                            </td>
                            <td class="text-center">
                                <a class="text-decoration-none text-dark" asp-page="./Edit" asp-route-id="@item.Id"><button class="btn btn-warning">Edit</button></a>
                                |
                                <form method="post" asp-page-handler="Delete" asp-route-id="@item.Id" onsubmit="return confirm('Are you sure you want to delete this coupon?');" style="display:inline;">
                                    <button type="submit" class="btn btn-danger">Delete</button>
                                </form>
                            </td>
                        </tr>
                        index++;
                    }
                }

            </tbody>
        </table>
        <nav aria-label="Page navigation example" class="d-flex justify-content-between mh-75 align-items-center">
            <div class="w-1 h-1"></div>
            <ul class="pagination">
                @{
                    string statusesQueryString = "";
                    if (Model.statuses != null)
                    {
                        foreach (var status in Model.statuses)
                        {
                            if (status.Equals("True"))
                            {
                                statusesQueryString += "statusesParam=True&";
                            }
                            else if (status.Equals("False"))
                            {
                                statusesQueryString += "statusesParam=False&";
                            }
                        }
                        // Loại bỏ dấu & ở cuối chuỗi
                        statusesQueryString = statusesQueryString.TrimEnd('&');
                    }
                }
                @{
                    string MinAmountQueryString = Model.minAmount != null ? $"minAmount={Model.minAmount}" : "";
                }

                @{
                    string MaxAmountQueryString = Model.maxAmount != null ? $"maxAmount={Model.maxAmount}" : "";
                }
                <li class="page-item @(Model.pageNumber == 1 ? "disabled" : "")">
                    <a class="page-link"
                       href="?pageNumberParam=@(Model.pageNumber - 1)&pageSizeParam=@Model.pageSize@(statusesQueryString.Length > 0 ? "&" + statusesQueryString : "")@(MinAmountQueryString.Length > 0 ? "&" + MinAmountQueryString : "")@(MaxAmountQueryString.Length > 0 ? "&" + MaxAmountQueryString : "" )@(Model.searchterm?.Length > 0 ? "&searchtermParam=" + Model.searchterm : "" )"
                <span aria-hidden="true">&laquo;</span>
                <span class="sr-only">Previous</span>
            </a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {

                    @*Calculate Gap Between Current Index And Current Page*@
                    int gap = Math.Abs(i - Model.pageNumber);


                    @*Still Display First And Last Page*@
                    if (i == 1 || i == Model.TotalPages)
                    {
                        <li class="page-item @(Model.pageNumber == i ? "active" : "")">
                            <a class="page-link"
                               href="?pageNumberParam=@i&pageSizeParam=@Model.pageSize@(statusesQueryString.Length > 0 ? "&" + statusesQueryString : "")@(MinAmountQueryString.Length > 0 ? "&" + MinAmountQueryString : "")@(MaxAmountQueryString.Length > 0 ? "&" + MaxAmountQueryString : "" )@(Model.searchterm?.Length > 0 ? "&searchtermParam=" + Model.searchterm : "" )">@i</a>
                        </li>
                    }
                    @*Hide Button Gap Many Step With Current Page*@
                    else if (gap > 3)
                    {
                        @*Gap > 3 (The first match will be display three dots, else (gap > 4) will be hide by bootstrap class
                name)*@
                        <li class="page-item @(gap > 4 ? "d-none" : "")">
                            ...
                        </li>
                    }
                    else
                    {
                        <li class="page-item @(Model.pageNumber == i ? "active" : "")">
                            <a class="page-link"
                               href="?pageNumberParam=@i&pageSizeParam=@Model.pageSize@(statusesQueryString.Length > 0 ? "&" + statusesQueryString : "")@(MinAmountQueryString.Length > 0 ? "&" + MinAmountQueryString : "")@(MaxAmountQueryString.Length > 0 ? "&" + MaxAmountQueryString : "" )@(Model.searchterm?.Length > 0 ? "&searchtermParam=" + Model.searchterm : "" )">@i</a>
                        </li>
                    }

                }
                <li class="page-item @(Model.pageNumber == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link"
                       href="?pageNumberParam=@Model.TotalPages&pageSizeParam=@Model.pageSize@(statusesQueryString.Length > 0 ? "&" + statusesQueryString : "")@(MinAmountQueryString.Length > 0 ? "&" + MinAmountQueryString : "")@(MaxAmountQueryString.Length > 0 ? "&" + MaxAmountQueryString : "" )@(Model.searchterm?.Length > 0 ? "&searchtermParam=" + Model.searchterm : "" )"
                       aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            </ul>

            <select id="PageSize" class="mh-30px">
                @for (int i = 1; i <= 5; i++)
                {
                    int value = i * 5;
                    <option selected="@(value == Model.pageSize)" value="@value">@value</option>
                }
            </select>
        </nav>
    </div>
</div>

@section Scripts {
    @* Change row perpage *@
   @*  <script>
        document.getElementById('PageSize').addEventListener('change', function () {
            var selectedPageSize = this.value;
            console.log(selectedPageSize);
            window.location.href = `/admin/coupons?pageNumberParam=@Model.pageNumber&pageSizeParam=${selectedPageSize}`;
        });
    </script> *@

    <script>
        document.getElementById('PageSize').addEventListener('change', function () {
            var selectedPageSize = this.value;
            var searchTerm = document.getElementById('searchInput').value;
            var minAmount = document.getElementsByName('minAmountParam')[0].value;
            var maxAmount = document.getElementsByName('maxAmountParam')[0].value;
            var statuses = [];
            document.querySelectorAll('input[name="statusesParam"]:checked').forEach(function (checkbox) {
                statuses.push(checkbox.value);
            });

            var url = `/admin/coupons?pageNumberParam=@Model.pageNumber&pageSizeParam=${selectedPageSize}`;

            if (searchTerm) {
                url += `&searchtermParam=${searchTerm}`;
            }

            if (minAmount) {
                url += `&minAmountParam=${minAmount}`;
            }

            if (maxAmount) {
                url += `&maxAmountParam=${maxAmount}`;
            }

            statuses.forEach(function (status) {
                url += `&statusesParam=${status}`;
            });

            window.location.href = url;
        });
    </script>

    @* Drop down menu *@
    <script>
        function toggleMenu() {
            /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content - This allows the user to have multiple dropdowns without any conflict */
            var dropdown = document.getElementsByClassName("dropdown-btn");
            var i;
            for (i = 0; i < dropdown.length; i++) {
                dropdown[i].addEventListener("click", function () {
                    this.classList.toggle("active");
                    var dropdownContent = this.nextElementSibling;
                    if (!this.classList.contains("active")) {
                        saveStateLCS(this.id, false)
                        dropdownContent.style.display = "none";
                        this.querySelector("i").classList.remove("fa-caret-down");
                        this.querySelector("i").classList.add("fa-caret-right");
                    } else {
                        saveStateLCS(this.id, true)
                        dropdownContent.style.display = "block";
                        this.querySelector("i").classList.remove("fa-caret-right");
                        this.querySelector("i").classList.add("fa-caret-down");
                    }
                });
            }
        }
        toggleMenu()

        //Save menu state into local storage
        function saveStateLCS(id, value) {
            localStorage.setItem(id, value);
        }

        //Get menu state from local storage when app start
        function GetStateFromLCS() {
            var dropdown = document.getElementsByClassName("dropdown-btn");
            for (i = 0; i < dropdown.length; i++) {
                let state = localStorage.getItem(dropdown[i].id);
                if (state == "true") {
                    dropdown[i].classList.add("active")
                    dropdown[i].querySelector("i").classList.remove("fa-caret-right");
                    dropdown[i].querySelector("i").classList.add("fa-caret-down");
                } else {
                    dropdown[i].classList.remove("active")
                    dropdown[i].querySelector("i").classList.remove("fa-caret-down");
                    dropdown[i].querySelector("i").classList.add("fa-caret-right");
                }
            }
        }
        GetStateFromLCS()



        // Get the cancel button
        const cancelBtn = document.getElementById('cancelFilter');

        cancelBtn.addEventListener('click', function () {
            $('input[type="checkbox"]:checked').prop('checked', false);
        });

    </script>


    @* Prevent close menu click inside bootstrap *@
    <script>
        document.querySelector('.dropdown-menu').addEventListener('click', function (event) {
            event.stopPropagation();
        });
    </script>


    @* Search *@
    <script>
        // Get the search input field
        const searchInput = document.getElementById('searchInput');

        // Set focus if value exist
        if (searchInput && searchInput.value) {
            searchInput.focus(); //sets focus to element

            //Set text cursor end of line
            var val = searchInput.value; //store the value of the element
            searchInput.value = ''; //clear the value of the element
            searchInput.value = val; //set that value back.
        }

        // Add an event listener for the input event
        searchInput.addEventListener('input', function () {
            // Get the form
            const form = document.getElementById('searchForm');
            // Submit the form
            form.submit();
        });
    </script>

    <script>
        document.getElementById('clearFilter').addEventListener('click', function () {
            // Reset the input fields to their default values
            document.getElementsByName('minAmountParam')[0].value = 0;
            document.getElementsByName('maxAmountParam')[0].value = 0;

            // Optionally, you can clear the search term input field as well
            document.getElementById('searchInput').value = '';

            // Submit the form to apply the cleared filters
            document.getElementById('searchForm').submit();
        });
    </script>
}

